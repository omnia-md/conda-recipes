#!/usr/bin/env python
from __future__ import print_function
import re
import sys
import operator
import glob
import os
import shutil
from os.path import isfile, basename, join, isdir, abspath
import argparse
import traceback
import tempfile
from subprocess import check_output, call, check_call, CalledProcessError
from functools import reduce
from six import string_types
from distutils.spawn import find_executable

BINSTAR_TOKEN = os.environ.pop('BINSTAR_TOKEN', None)

try:
    from conda.utils import memoized
    from conda.config import subdir as platform
    assert platform in ('osx-64', 'linux-32', 'linux-64', 'win-32', 'win-64')
    from conda_build.metadata import MetaData
    import yaml
except ImportError:
    print('This script requires conda-build', file=sys.stderr)
    print('  $ conda install conda-build', file=sys.stderr)
    exit(1)

try:
    from binstar_client.utils import get_binstar
    from binstar_client.errors import NotFound
except ImportError:
    print('This script requires binstar', file=sys.stderr)
    print('  $ conda install binstar')
    exit(1)

ROOTDIR = os.path.dirname(sys.executable)
if sys.platform == 'win32':
	# find conda-build associated with the current python
	# interpreter
	conda_build = find_executable('conda-build',
		path=ROOTDIR + ';' + ROOTDIR + '\Scripts')
	assert conda_build is not None
else:
	conda_build = find_executable('conda-build', path=ROOTDIR)
	assert conda_build is not None


def main():
    p = argparse.ArgumentParser(
        'Build conda packages',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    p.add_argument(
        'recipe',
        action="store",
        metavar='RECIPE_PATH',
        nargs='+',
        help="path to recipe directory"
    )
    p.add_argument(
        '--check-against',
        metavar='BINSTAR_USER'
    )
    p.add_argument('--upload',
        help='Automatically upload to binstar under this username'
    )
    p.add_argument(
        '--no-test',
        action='store_true',
        dest='notest',
        help="do not test the package"
    )
    p.add_argument(
        '--python',
        help="Set the Python version used by conda build",
        metavar="PYTHON_VER",
        default='27,33,34',
    )
    p.add_argument(
        '--numpy',
        help="Set the NumPy version used by conda build",
        metavar="NUMPY_VER",
        default='18,19',
    )
    args = p.parse_args()
    execute(args, p)


def toposort(data):
    """Topological sort.

    The expected input is a dictionary whose keys are items, and whose
    values are a set of the dependent items.

    The output is a genenerator over the items in topological order.
    """
    # http://code.activestate.com/recipes/578272-topological-sort/

    # Ignore self dependencies.
    for k, v in data.items():
        v.discard(k)
    # Find all items that don't depend on anything.
    extra_items_in_deps = reduce(
        set.union, data.values()) - set(data.keys())
    # Add empty dependences where needed
    data.update({item: set() for item in extra_items_in_deps})
    while True:
        ordered = set(item for item, dep in data.items() if not dep)
        if not ordered:
            break
        for item in ordered:
            yield item
        data = {item: (dep - ordered) for item, dep in data.items()
                if item not in ordered}
    if data:
        raise ValueError(
            "Cyclic dependencies exist among these items"
            ":\n%s" % '\n'.join(repr(x) for x in data.items()))


def sort_recipes(recipe_paths):
    metadatas = []
    for r in recipe_paths:
        try:
            if isdir(r):
                metadatas.append(MetaData(r))
        except SystemExit:
            pass

    names = {m.get_value('package/name'): m for m in metadatas}

    graph = {}
    for m in metadatas:
        all_requirements = set(m.get_value('requirements/build', []))
        all_requirements.update(m.get_value('requirements/run', []))
        all_requirements.update(m.get_value('test/requires', []))

        our_requirements = set()
        for r in all_requirements:
            if r in names:
                # remove any version specified in the requirements
                # (e.g. numpy >= 1.6) or something -- we just want the "numpy"
                if ' ' in r:
                    r = r.split()[0]
                our_requirements.add(r)

        graph[m.get_value('package/name')] = our_requirements

    order = list(toposort(graph))
    return order


@memoized
def conda_build_output(recipe_path, python, numpy):
    out = check_output(
        [conda_build, '--output', '--python', python,
         '--numpy', numpy, recipe_path]).strip()
    return out.decode('utf-8')


def package_exists_locally(recipe_path, python, numpy):
    filename = conda_build_output(recipe_path, python, numpy)
    if isfile(filename):
        print('Package exists locally: %s' % basename(filename))
        return True
    return False


def skip_package(recipe_path, python, numpy):
    PLATFORMS = {'linux-64', 'linux-32', 'linux-armv6l', 'osx-64', 'win-32',
                 'win-64'}
    PYTHONS = {'py26', 'py27', 'py32', 'py33', 'py34', 'py35'}

    skip_path = join(recipe_path, 'skip.yaml')

    if not os.path.exists(skip_path):
        return False
    with open(skip_path) as f:
        skip_items = yaml.load(f)

    for skip in skip_items:
        if not isinstance(skip, string_types):
            continue

        skip_specs = set(skip.split('_'))
        # each skip specification must look like <PLATFORM_SPEC>_<PYTHON_SPEC>,
        # <PLATFORM_SPEC>, or <PYTHON_SPEC>, e.g. "win-32", "win-32_py34"
        # or "py34". <PYTHON_SPEC> needs to look like "py26", "py34", etc.
        valid = all((s in PLATFORMS) or (s in PYTHONS) for s in skip_specs)
        if not valid:
            print('%s: invalid skip specification: "%s"' % (skip_path, skip),
                  file=sys.stderr)
            exit(1)

        skip_specs.discard('py%s' % python)
        skip_specs.discard(platform)
        if len(skip_specs) == 0:
            print('[conda-build-all skip] %s on py%s_%s' % (
                  basename(recipe_path), python, platform))
            return True

    return False


def upload_to_binstar(recipe_path, python, numpy, username):
    filename = conda_build_output(recipe_path, python, numpy)
    cmd = ['binstar']
    if BINSTAR_TOKEN is not None:
        cmd.extend(['-t', BINSTAR_TOKEN])
    cmd.extend(['upload', '-u', username, filename])
    try:
        check_call(cmd)
    except CalledProcessError as e:
        e.cmd = '[not shown]'
        raise e
    return


def package_exists_binstar(recipe_path, python, numpy, binstar_user,
                           binstar_handle):
    if (not binstar_user) or (not binstar_handle):
        return False

    package = MetaData(recipe_path).get_value('package/name')
    filename = basename(conda_build_output(recipe_path, python, numpy))
    name, version, remainder = filename.rsplit('-', 2)
    spec = join(binstar_user, name, version, platform, filename)

    try:
        dist = binstar_handle.distribution(
            binstar_user, package, version, platform + '/' + filename)
        print('Package exists on binstar: %s' % package)
        print('  full_name: %s' % dist['full_name'])
        print('  uploaded:  %s' % dist['upload_time'])
        print('  md5:       %s' % dist['md5'])
        return True
    except NotFound:
        return False


class VersionIter(object):
    def __init__(self, pkg, metadata, versions):
        self.versions = versions
        self.metadata = metadata
        self.pkg = pkg

    def __iter__(self):
        reqs = self.metadata.get_value('requirements/build')
        reqs = [r.split(' ')[0] if ' ' in r else r for r in reqs]
        if self.pkg in reqs:
            for v in self.versions:
                yield v
        else:
            yield self.versions[0]


def execute(args, p):
    binstar_user = args.check_against
    if binstar_user:
        binstar = get_binstar()
    else:
        binstar = None

    pythons = re.split(',\s*|\s+', args.python)
    numpys = re.split(',\s*|\s+', args.numpy)

    args_recipe = reduce(operator.add, (glob.glob(e) for e in args.recipe))
    recipes = [abspath(e) for e in sort_recipes(args_recipe)]
    print('Building recipes in the following order:')
    print(', '.join([basename(r) for r in args_recipe]))
    print()

    curdir = abspath(os.curdir)
    tempdir = tempfile.mkdtemp()
    try:
        os.chdir(tempdir)

        for recipe in recipes:
            metadata = MetaData(recipe)
            for python in VersionIter('python', metadata, pythons):
                for numpy in VersionIter('numpy', metadata, numpys):
                    if skip_package(recipe, python=python, numpy=numpy):
                        continue
                    if package_exists_locally(recipe, python=python, numpy=numpy):
                        continue
                    if package_exists_binstar(recipe, python=python, numpy=numpy,
                                              binstar_user=binstar_user,
                                              binstar_handle=binstar):
                        continue

                    cmd = [conda_build, '-q', '--python', python, '--numpy', numpy, '--quiet']
                    if args.notest:
                        cmd.append('--no-test')
                    cmd.append(recipe)
                    retcode = call(cmd)
                    if retcode == 0 and args.upload is not None:
                        upload_to_binstar(recipe, python, numpy, username=args.upload)

                    sys.stdout.flush()
    finally:
        os.chdir(curdir)
        shutil.rmtree(tempdir)

if __name__ == '__main__':
    main()
